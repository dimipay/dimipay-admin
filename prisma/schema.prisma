generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int             @id @default(autoincrement())
  systemId            String          @unique @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now()) @updatedAt
  isDisabled          Boolean         @default(false)
  accountName         String          @unique
  name                String
  isTeacher           Boolean?        @default(false)
  profileImage        String?
  paymentPin          String?
  deviceUid           String?
  bioKey              String?
  phoneNumber         String?
  relatedAdminAccount AdminAccount?
  issuedCoupons       Coupon[]        @relation("issue")
  receivedCoupons     Coupon[]        @relation("receive")
  notice              Notice[]
  paymentMethods      PaymentMethod[]
  transactions        Transaction[]
}

model PaymentMethod {
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  type        PaymentMethodType
  color       String?
  name        String?
  ownerId     String
  systemId    String            @unique @default(uuid())
  id          Int               @id @default(autoincrement())
  owner       User              @relation(fields: [ownerId], references: [systemId])
  generalCard GeneralCard?      @relation("generalCard")
  prepaidCard PrepaidCard?      @relation("prepaidCard")
  transaction Transaction[]
}

model PrepaidCard {
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  balance                  Int                        @default(0)
  paymentMethodId          String                     @unique
  id                       Int                        @id @default(autoincrement())
  paymentMethod            PaymentMethod              @relation("prepaidCard", fields: [paymentMethodId], references: [systemId])
  prepaidCardChargeHistory PrepaidCardChargeHistory[]
}

model PrepaidCardChargeHistory {
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
  delta               Int
  status              TransactionStatus
  method              String
  detailInfo          String
  id                  Int               @id @default(autoincrement())
  targetPrepaidCardId Int
  prepaidCard         PrepaidCard       @relation(fields: [targetPrepaidCardId], references: [id])
}

model GeneralCard {
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  cardNumber      String
  validMonth      Int
  validYear       Int
  billingKey      String
  paymentMethodId String        @unique
  id              Int           @id @default(autoincrement())
  paymentMethod   PaymentMethod @relation("generalCard", fields: [paymentMethodId], references: [systemId])
}

model Coupon {
  id                String       @id @default(uuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  name              String
  expiresAt         DateTime?
  amount            Int
  usedTransactionId String?
  issuerId          String
  receiverId        String
  issuer            User         @relation("issue", fields: [issuerId], references: [systemId])
  receiver          User         @relation("receive", fields: [receiverId], references: [systemId])
  Transaction       Transaction? @relation(fields: [usedTransactionId], references: [systemId])
}

model Transaction {
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  billingId           String?
  totalPrice          Int
  status              Transaction_status
  statusText          String?
  transactionMethod   TransactionMethod
  usedCardId          String
  posDeviceId         String?
  userId              String
  specialPurchase     String?
  specialPurchaseType SpecialPurchaseType?
  systemId            String               @unique @default(uuid())
  id                  Int                  @id @default(autoincrement())
  posDevice           PosDevice?           @relation(fields: [posDeviceId], references: [id])
  paymentMethod       PaymentMethod        @relation(fields: [usedCardId], references: [systemId])
  user                User                 @relation(fields: [userId], references: [systemId])
  coupon              Coupon[]
  products            Product[]
}

model Category {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  name             String
  color            String
  discountPolicyId String?
  id               Int              @id @default(autoincrement())
  products         Product[]
  discountPolicy   DiscountPolicy[]
}

model Product {
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @default(now()) @updatedAt
  name                    String
  barcode                 String?
  price                   Int
  sellingStopped          Boolean           @default(false)
  id                      Int               @id @default(autoincrement())
  categoryId              Int
  systemId                String            @unique @default(uuid())
  category                Category          @relation(fields: [categoryId], references: [id])
  productInOutLog         ProductInOutLog[]
  transaction             Transaction[]
  excludedDiscountPolicy  DiscountPolicy[]  @relation("discountExcludedProduct")
  targettedDiscountPolicy DiscountPolicy[]  @relation("discountTargetProduct")
}

model ProductInOutLog {
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  delta     Int
  message   String?
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}

model DiscountPolicy {
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  fixedPrice      Int?
  percentRate     Int?
  eventId         String?
  id              Int        @id @default(autoincrement())
  relatedEvent    Event?     @relation(fields: [eventId], references: [id])
  targetCategory  Category[]
  excludedProduct Product[]  @relation("discountExcludedProduct")
  targetProduct   Product[]  @relation("discountTargetProduct")
}

model PosDevice {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  name        String
  disabled    Boolean       @default(false)
  transaction Transaction[]
}

model Event {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  startsAt         DateTime?
  endsAt           DateTime?
  title            String
  description      String
  url              String
  discountPolicies DiscountPolicy[]
}

model Notice {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  startsAt    DateTime  @default(now())
  endsAt      DateTime?
  title       String
  description String?
  url         String?
  authorId    String
  author      User      @relation(fields: [authorId], references: [systemId])
}

model AdminAccount {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
  relatedUserSystemUid String?  @unique
  username             String
  hashedPassword       String
  description          String?
  relatedUser          User?    @relation(fields: [relatedUserSystemUid], references: [systemId])
}

enum PaymentMethodType {
  PREPAID
  GENERAL
}

enum TransactionStatus {
  CONFIRMED
  CANCELED
  PENDING
  ERROR
}

enum TransactionMethod {
  SMS
  APP_QR
  FACESIGN
  INAPP
}

enum SpecialPurchaseType {
  COUPON
  PRINTER
}

enum Transaction_status {
  CONFIRMED
  CANCELED
  PENDING
  ERROR
}
