generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             Int             @id @default(autoincrement())
  systemId                       String          @unique @default(uuid())
  createdAt                      DateTime        @default(now())
  updatedAt                      DateTime        @default(now()) @updatedAt
  isDisabled                     Boolean         @default(false)
  accountName                    String          @unique
  name                           String
  isTeacher                      Boolean?        @default(false)
  profileImage                   String?
  paymentPin                     String?
  deviceUid                      String?
  bioKey                         String?
  phoneNumber                    String?
  AdminAccount                   AdminAccount?
  Coupon_Coupon_issuerIdToUser   Coupon[]        @relation("Coupon_issuerIdToUser")
  Coupon_Coupon_receiverIdToUser Coupon[]        @relation("Coupon_receiverIdToUser")
  Notice                         Notice[]
  PaymentMethod                  PaymentMethod[]
  Transaction                    Transaction[]
}

model PaymentMethod {
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  type        PaymentMethodType
  color       String?
  name        String?
  systemId    String            @unique @default(uuid())
  id          Int               @id @default(autoincrement())
  ownerId     Int
  IS_DELETED  Boolean           @default(false)
  User        User              @relation(fields: [ownerId], references: [id])
  GeneralCard GeneralCard?
  PrepaidCard PrepaidCard?
  Transaction Transaction[]
}

model PrepaidCard {
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  balance                  Int                        @default(0)
  id                       Int                        @id @default(autoincrement())
  paymentMethodId          Int                        @unique
  PaymentMethod            PaymentMethod              @relation(fields: [paymentMethodId], references: [id])
  prepaidCardChargeHistory PrepaidCardChargeHistory[]
}

model PrepaidCardChargeHistory {
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
  delta               Int
  status              TransactionStatus
  method              String
  detailInfo          String
  id                  Int               @id @default(autoincrement())
  targetPrepaidCardId Int
  prepaidCard         PrepaidCard       @relation(fields: [targetPrepaidCardId], references: [id])
}

model GeneralCard {
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  cardNumber      String
  validMonth      Int
  validYear       Int
  billingKey      String
  id              Int           @id @default(autoincrement())
  paymentMethodId Int           @unique
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model Coupon {
  id                           String       @id @default(uuid())
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @default(now()) @updatedAt
  name                         String
  expiresAt                    DateTime?
  amount                       Int
  usedTransactionId            Int?
  issuerId                     Int
  receiverId                   Int
  User_Coupon_issuerIdToUser   User         @relation("Coupon_issuerIdToUser", fields: [issuerId], references: [id])
  User_Coupon_receiverIdToUser User         @relation("Coupon_receiverIdToUser", fields: [receiverId], references: [id])
  Transaction                  Transaction? @relation(fields: [usedTransactionId], references: [id])
}

model Transaction {
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  billingId         String?
  totalPrice        Int
  status            Transaction_status
  statusText        String?
  transactionMethod TransactionMethod
  posDeviceId       String?
  systemId          String             @unique @default(uuid())
  id                Int                @id @default(autoincrement())
  purchaseType      PurchaseType?
  purchaseDetail    Json?
  usedCardId        Int
  userId            Int
  posDevice         PosDevice?         @relation(fields: [posDeviceId], references: [id])
  PaymentMethod     PaymentMethod      @relation(fields: [usedCardId], references: [id])
  User              User               @relation(fields: [userId], references: [id])
  Coupon            Coupon[]
  products          Product[]
}

model Category {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  name             String
  color            String
  discountPolicyId String?
  id               Int              @id @default(autoincrement())
  IS_DELETED       Boolean          @default(false)
  products         Product[]
  discountPolicy   DiscountPolicy[]
}

model Product {
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @default(now()) @updatedAt
  name                    String
  barcode                 String?
  purchaseCost            Int
  sellingPrice            Int
  sellingStopped          Boolean           @default(false)
  id                      Int               @id @default(autoincrement())
  categoryId              Int
  systemId                String            @unique @default(uuid())
  IS_DELETED              Boolean           @default(false)
  alias                   String?
  category                Category          @relation(fields: [categoryId], references: [id])
  productInOutLog         ProductInOutLog[]
  transaction             Transaction[]
  excludedDiscountPolicy  DiscountPolicy[]  @relation("discountExcludedProduct")
  targettedDiscountPolicy DiscountPolicy[]  @relation("discountTargetProduct")
}

model ProductInOutLog {
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
  delta         Int
  message       String?
  id            Int              @id @default(autoincrement())
  productId     Int
  type          ProductInOutType
  unitCost      Int
  product       Product          @relation(fields: [productId], references: [id])
  StoreProducts StoreProducts[]  @relation("storing")
}

model DiscountPolicy {
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  fixedPrice      Int?
  percentRate     Int?
  eventId         String?
  id              Int        @id @default(autoincrement())
  relatedEvent    Event?     @relation(fields: [eventId], references: [id])
  targetCategory  Category[]
  excludedProduct Product[]  @relation("discountExcludedProduct")
  targetProduct   Product[]  @relation("discountTargetProduct")
}

model PosDevice {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  name        String
  disabled    Boolean       @default(false)
  IS_DELETED  Boolean       @default(false)
  transaction Transaction[]
}

model Event {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  startsAt         DateTime?
  endsAt           DateTime?
  title            String
  description      String
  url              String
  discountPolicies DiscountPolicy[]
}

model Notice {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  startsAt    DateTime  @default(now())
  endsAt      DateTime?
  title       String
  description String?
  url         String?
  authorId    Int
  User        User      @relation(fields: [authorId], references: [id])
}

model AdminAccount {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  username       String
  hashedPassword String
  description    String?
  relatedUserId  Int?            @unique
  User           User?           @relation(fields: [relatedUserId], references: [id])
  StoreProducts  StoreProducts[]
}

model UserPassword {
  id           Int    @id @default(autoincrement())
  accountName  String @unique
  passwordHash String
}

model StoreProducts {
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  id              Int               @id @default(autoincrement())
  systemId        String            @unique
  workerId        String
  totalCost       Int
  storeDate       DateTime          @default(now())
  title           String            @unique
  AdminAccount    AdminAccount      @relation(fields: [workerId], references: [id])
  ProductInOutLog ProductInOutLog[] @relation("storing")
}

enum PaymentMethodType {
  PREPAID
  GENERAL
}

enum TransactionStatus {
  CONFIRMED
  CANCELED
  PENDING
  ERROR
}

enum TransactionMethod {
  SMS
  APP_QR
  FACESIGN
  INAPP
}

enum Transaction_status {
  CONFIRMED
  CANCELED
  PENDING
  ERROR
}

enum PurchaseType {
  COUPON
  PRINTER
  GENERAL
}

enum ProductInOutType {
  INCOME
  OUTCOME
}
