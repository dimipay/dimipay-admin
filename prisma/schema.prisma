generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             Int             @id @default(autoincrement())
  systemId                       String          @unique @default(dbgenerated("gen_random_uuid()"))
  createdAt                      DateTime        @default(now())
  updatedAt                      DateTime        @default(now()) @updatedAt
  isDisabled                     Boolean         @default(false)
  accountName                    String          @unique
  name                           String
  isTeacher                      Boolean?        @default(false)
  profileImage                   String?
  paymentPin                     String?
  deviceUid                      String?
  bioKey                         String?
  phoneNumber                    String?
  googleId                       String?         @unique
  faceKey                        String?         @unique
  pinTryCount                    Int             @default(0)
  couponTryCount                 Int             @default(0)
  AdminAccount                   AdminAccount?
  Coupon_Coupon_issuerIdToUser   Coupon[]        @relation("Coupon_issuerIdToUser")
  Coupon_Coupon_receiverIdToUser Coupon[]        @relation("Coupon_receiverIdToUser")
  CouponRequest                  CouponRequest[]
  Notice                         Notice[]
  PaymentMethod                  PaymentMethod[]
  Transaction                    Transaction[]
}

model PaymentMethod {
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  type        PaymentMethodType
  color       String?
  name        String?
  systemId    String            @unique @default(uuid())
  id          Int               @id @default(autoincrement())
  is_deleted  Boolean           @default(false)
  ownerSid    String
  previewNo   String?
  ownerName   String?
  User        User              @relation(fields: [ownerSid], references: [systemId])
  GeneralCard GeneralCard?
  PrepaidCard PrepaidCard?
  Transaction Transaction[]

  @@unique([ownerSid, systemId])
}

model PrepaidCard {
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @default(now()) @updatedAt
  balance                  Int                        @default(0)
  id                       Int                        @id @default(autoincrement())
  systemId                 String                     @unique @default(dbgenerated("gen_random_uuid()"))
  paymentMethodSid         String                     @unique
  PaymentMethod            PaymentMethod              @relation(fields: [paymentMethodSid], references: [systemId])
  PrepaidCardChargeHistory PrepaidCardChargeHistory[]
}

model PrepaidCardChargeHistory {
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @default(now()) @updatedAt
  delta                Int
  status               TransactionStatus
  method               String
  detailInfo           String
  id                   Int               @id @default(autoincrement())
  systemId             String            @unique @default(dbgenerated("gen_random_uuid()"))
  targetPrepaidCardSid String
  PrepaidCard          PrepaidCard       @relation(fields: [targetPrepaidCardSid], references: [systemId])
}

model GeneralCard {
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  billingKey       String?
  id               Int           @id @default(autoincrement())
  systemId         String        @unique @default(dbgenerated("gen_random_uuid()"))
  paymentMethodSid String        @unique
  hash             String?
  PaymentMethod    PaymentMethod @relation(fields: [paymentMethodSid], references: [systemId], onDelete: Cascade)
  Transaction      Transaction[]
}

model Coupon {
  createdAt                    DateTime      @default(now())
  expiresAt                    DateTime
  code                         String        @unique
  issuerId                     Int
  receiverId                   Int?
  requestId                    Int
  typeId                       Int
  usedAt                       DateTime?
  usedTransactionId            Int?
  id                           Int           @id @default(autoincrement())
  User_Coupon_issuerIdToUser   User          @relation("Coupon_issuerIdToUser", fields: [issuerId], references: [id])
  User_Coupon_receiverIdToUser User?         @relation("Coupon_receiverIdToUser", fields: [receiverId], references: [id])
  CouponRequest                CouponRequest @relation(fields: [requestId], references: [id])
  CouponType                   CouponType    @relation(fields: [typeId], references: [id])
  Transaction                  Transaction?  @relation(fields: [usedTransactionId], references: [id])
}

model Transaction {
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  billingId         String?
  totalPrice        Int
  status            Transaction_status
  statusText        String?
  transactionMethod TransactionMethod
  systemId          String             @unique @default(uuid())
  id                Int                @id @default(autoincrement())
  purchaseType      PurchaseType?
  purchaseDetail    Json?
  posDeviceSid      String?
  userSid           String
  paymentMethodId   Int?
  usedCard          String?
  PaymentMethod     PaymentMethod?     @relation(fields: [paymentMethodId], references: [id])
  PosDevice         PosDevice?         @relation(fields: [posDeviceSid], references: [systemId])
  GeneralCard       GeneralCard?       @relation(fields: [usedCard], references: [systemId])
  User              User               @relation(fields: [userSid], references: [systemId])
  Coupon            Coupon[]
  ProductInOutLog   ProductInOutLog[]
  products          Product[]
}

model Category {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  name           String
  color          String?
  id             Int              @id @default(autoincrement())
  is_deleted     Boolean          @default(false)
  systemId       String           @unique @default(dbgenerated("gen_random_uuid()"))
  Product        Product[]
  discountPolicy DiscountPolicy[]
}

model Product {
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @default(now()) @updatedAt
  name                    String
  barcode                 String            @unique
  purchaseCost            Int?
  sellingPrice            Int
  sellingStopped          Boolean           @default(false)
  id                      Int               @id @default(autoincrement())
  systemId                String            @unique @default(dbgenerated("gen_random_uuid()"))
  is_deleted              Boolean           @default(false)
  alias                   String?
  categorySid             String?
  Category                Category?         @relation(fields: [categorySid], references: [systemId])
  ProductInOutLog         ProductInOutLog[]
  transaction             Transaction[]
  excludedDiscountPolicy  DiscountPolicy[]  @relation("discountExcludedProduct")
  targettedDiscountPolicy DiscountPolicy[]  @relation("discountTargetProduct")
}

model ProductInOutLog {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  delta          Int
  message        String?
  id             Int              @id @default(autoincrement())
  type           ProductInOutType
  unitCost       Int
  systemId       String           @unique @default(dbgenerated("gen_random_uuid()"))
  productSid     String?
  barcode        String?
  storeingSid    String?
  transactionSid String?
  Product        Product?         @relation(fields: [productSid], references: [systemId])
  StoreProducts  StoreProducts?   @relation(fields: [storeingSid], references: [systemId])
  Transaction    Transaction?     @relation(fields: [transactionSid], references: [systemId])
}

model DiscountPolicy {
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  fixedPrice      Int?
  percentRate     Int?
  id              Int        @id @default(autoincrement())
  systemId        String     @unique @default(dbgenerated("gen_random_uuid()"))
  eventSid        String?
  Event           Event?     @relation(fields: [eventSid], references: [systemId])
  targetCategory  Category[]
  excludedProduct Product[]  @relation("discountExcludedProduct")
  targetProduct   Product[]  @relation("discountTargetProduct")
}

model PosDevice {
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  name        String
  disabled    Boolean       @default(false)
  is_deleted  Boolean       @default(false)
  systemId    String        @unique @default(dbgenerated("gen_random_uuid()"))
  id          Int           @id @default(autoincrement())
  Transaction Transaction[]
}

model Event {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  startsAt       DateTime?
  endsAt         DateTime?
  title          String
  description    String
  url            String
  systemId       String           @unique @default(dbgenerated("gen_random_uuid()"))
  id             Int              @id @default(autoincrement())
  DiscountPolicy DiscountPolicy[]
}

model Notice {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  startsAt    DateTime  @default(now())
  endsAt      DateTime?
  title       String
  description String?
  url         String?
  systemId    String    @unique @default(dbgenerated("gen_random_uuid()"))
  id          Int       @id @default(autoincrement())
  authorSid   String
  User        User      @relation(fields: [authorSid], references: [systemId])
}

model AdminAccount {
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  username       String
  hashedPassword String
  description    String?
  systemId       String          @unique @default(dbgenerated("gen_random_uuid()"))
  id             Int             @id @default(autoincrement())
  relatedUserSid String?         @unique
  adminRoleId    Int?
  AdminRole      AdminRole?      @relation(fields: [adminRoleId], references: [id])
  User           User?           @relation(fields: [relatedUserSid], references: [systemId])
  StoreProducts  StoreProducts[]
}

model UserPassword {
  id           Int    @id @default(autoincrement())
  accountName  String @unique
  passwordHash String
}

model StoreProducts {
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  id              Int               @id @default(autoincrement())
  systemId        String            @unique @default(dbgenerated("gen_random_uuid()"))
  totalCost       Int
  storeDate       DateTime          @default(now())
  title           String            @unique
  workerSid       String
  AdminAccount    AdminAccount      @relation(fields: [workerSid], references: [systemId])
  ProductInOutLog ProductInOutLog[]
}

model AdminRole {
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  id           Int            @id @default(autoincrement())
  name         String         @unique
  permissions  Json
  AdminAccount AdminAccount[]
}

model CouponRequest {
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  id                Int                 @id @default(autoincrement())
  approved          Boolean             @default(false)
  requestUserId     Int
  User              User                @relation(fields: [requestUserId], references: [id])
  Coupon            Coupon[]
  CouponRequestItem CouponRequestItem[]
}

model CouponRequestItem {
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  id              Int           @id @default(autoincrement())
  amount          Int
  couponTypeId    Int
  couponRequestId Int
  CouponRequest   CouponRequest @relation(fields: [couponRequestId], references: [id])
  CouponType      CouponType    @relation(fields: [couponTypeId], references: [id])
}

model CouponType {
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  id                Int                 @id @default(autoincrement())
  name              String
  price             Int
  discount          Int
  description       String?
  is_deleted        Boolean             @default(false)
  type              CouponTypeName
  Coupon            Coupon[]
  CouponRequestItem CouponRequestItem[]
}

enum PaymentMethodType {
  PREPAID
  GENERAL
}

enum TransactionStatus {
  CONFIRMED
  CANCELED
  PENDING
  ERROR
}

enum TransactionMethod {
  SMS
  APP_QR
  FACESIGN
  INAPP
  SYSTEM
}

enum Transaction_status {
  CONFIRMED
  CANCELED
  PENDING
  ERROR
}

enum PurchaseType {
  COUPON
  PRINTER
  GENERAL
}

enum ProductInOutType {
  INCOME
  OUTCOME
}

enum CouponTypeName {
  CASH
  CATEGORY
}
