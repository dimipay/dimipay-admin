generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id            String        @id
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  type          CardType
  ownerId       String
  generalCardId String?       @unique
  prepaidCardId String?       @unique
  User          User          @relation(fields: [ownerId], references: [id])
  GeneralCard   GeneralCard?
  PrepaidCard   PrepaidCard?
  Transaction   Transaction[]
}

model Category {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime
  name      String
  color     String
  Product   Product[]
}

model Coupon {
  id                           String        @id
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime
  issuerId                     String
  receiverId                   String
  name                         String
  expiresAt                    DateTime?
  transactionId                String?
  balance                      Int
  originAmount                 Int
  User_Coupon_issuerIdToUser   User          @relation("Coupon_issuerIdToUser", fields: [issuerId], references: [id])
  User_Coupon_receiverIdToUser User          @relation("Coupon_receiverIdToUser", fields: [receiverId], references: [id])
  Transaction                  Transaction[]
}

model GeneralCard {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  cardNumber String?
  validMonth Int?
  validYear  Int?
  billingKey String?
  cardId     String   @unique
  isDeleted  Boolean  @default(false)
  Card       Card     @relation(fields: [cardId], references: [id])
}

model PrepaidCard {
  id                       String                     @id
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  balance                  Int
  cardId                   String                     @unique
  Card                     Card                       @relation(fields: [cardId], references: [id])
  PrepaidCardChargeHistory PrepaidCardChargeHistory[]
}

model PrepaidCardChargeHistory {
  id            String            @id
  createdAt     DateTime          @default(now())
  updatedAt     DateTime
  delta         Int
  prepaidCardId String
  status        TransactionStatus
  method        String
  detailInfo    String
  PrepaidCard   PrepaidCard       @relation(fields: [prepaidCardId], references: [id])
}

model Product {
  id              String            @id
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  name            String
  barcode         String?
  price           Int
  categoryId      String
  transactionId   String?
  Category        Category          @relation(fields: [categoryId], references: [id])
  Transaction     Transaction?      @relation(fields: [transactionId], references: [id])
  ProductInOutLog ProductInOutLog[]
}

model ProductInOutLog {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
  delta     Int
  productId String
  Product   Product  @relation(fields: [productId], references: [id])
}

model Transaction {
  id         String            @id
  createdAt  DateTime          @default(now())
  updatedAt  DateTime
  cardId     String
  billingId  Int
  totalPrice Int
  status     TransactionStatus
  statusText String?
  Card       Card              @relation(fields: [cardId], references: [id])
  Product    Product[]
  Coupon     Coupon[]
}

model User {
  id                             String   @id
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime
  accountName                    String   @unique
  name                           String
  roles                          Role[]
  profileImage                   String
  studentNumber                  String   @unique
  studentUid                     String   @unique
  Card                           Card[]
  Coupon_Coupon_issuerIdToUser   Coupon[] @relation("Coupon_issuerIdToUser")
  Coupon_Coupon_receiverIdToUser Coupon[] @relation("Coupon_receiverIdToUser")
}

enum CardType {
  PREPAID
  GENERAL
}

enum Role {
  USER
  TEACHER
  ADMIN
}

enum TransactionStatus {
  CONFIRMED
  CANCELED
  ERROR
}
